// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DonorPatientsClient is the client API for DonorPatients service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DonorPatientsClient interface {
	CreateUser(ctx context.Context, in *Util, opts ...grpc.CallOption) (*User, error)
	Login(ctx context.Context, in *Util, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *Util, opts ...grpc.CallOption) (*StatusSuccessful, error)
	UpdateUser(ctx context.Context, in *Util, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *Util, opts ...grpc.CallOption) (*User, error)
	GetAllDonors(ctx context.Context, in *Util, opts ...grpc.CallOption) (DonorPatients_GetAllDonorsClient, error)
	GetAllPatients(ctx context.Context, in *Util, opts ...grpc.CallOption) (DonorPatients_GetAllPatientsClient, error)
	SendRequest(ctx context.Context, in *Util, opts ...grpc.CallOption) (*StatusSuccessful, error)
	AcceptRequest(ctx context.Context, in *Util, opts ...grpc.CallOption) (*StatusSuccessful, error)
	CancelRequest(ctx context.Context, in *Util, opts ...grpc.CallOption) (*StatusSuccessful, error)
	CancelConnection(ctx context.Context, in *Util, opts ...grpc.CallOption) (*StatusSuccessful, error)
}

type donorPatientsClient struct {
	cc grpc.ClientConnInterface
}

func NewDonorPatientsClient(cc grpc.ClientConnInterface) DonorPatientsClient {
	return &donorPatientsClient{cc}
}

func (c *donorPatientsClient) CreateUser(ctx context.Context, in *Util, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pb.DonorPatients/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donorPatientsClient) Login(ctx context.Context, in *Util, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pb.DonorPatients/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donorPatientsClient) DeleteUser(ctx context.Context, in *Util, opts ...grpc.CallOption) (*StatusSuccessful, error) {
	out := new(StatusSuccessful)
	err := c.cc.Invoke(ctx, "/pb.DonorPatients/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donorPatientsClient) UpdateUser(ctx context.Context, in *Util, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pb.DonorPatients/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donorPatientsClient) GetUser(ctx context.Context, in *Util, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pb.DonorPatients/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donorPatientsClient) GetAllDonors(ctx context.Context, in *Util, opts ...grpc.CallOption) (DonorPatients_GetAllDonorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DonorPatients_ServiceDesc.Streams[0], "/pb.DonorPatients/GetAllDonors", opts...)
	if err != nil {
		return nil, err
	}
	x := &donorPatientsGetAllDonorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DonorPatients_GetAllDonorsClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type donorPatientsGetAllDonorsClient struct {
	grpc.ClientStream
}

func (x *donorPatientsGetAllDonorsClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *donorPatientsClient) GetAllPatients(ctx context.Context, in *Util, opts ...grpc.CallOption) (DonorPatients_GetAllPatientsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DonorPatients_ServiceDesc.Streams[1], "/pb.DonorPatients/GetAllPatients", opts...)
	if err != nil {
		return nil, err
	}
	x := &donorPatientsGetAllPatientsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DonorPatients_GetAllPatientsClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type donorPatientsGetAllPatientsClient struct {
	grpc.ClientStream
}

func (x *donorPatientsGetAllPatientsClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *donorPatientsClient) SendRequest(ctx context.Context, in *Util, opts ...grpc.CallOption) (*StatusSuccessful, error) {
	out := new(StatusSuccessful)
	err := c.cc.Invoke(ctx, "/pb.DonorPatients/SendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donorPatientsClient) AcceptRequest(ctx context.Context, in *Util, opts ...grpc.CallOption) (*StatusSuccessful, error) {
	out := new(StatusSuccessful)
	err := c.cc.Invoke(ctx, "/pb.DonorPatients/AcceptRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donorPatientsClient) CancelRequest(ctx context.Context, in *Util, opts ...grpc.CallOption) (*StatusSuccessful, error) {
	out := new(StatusSuccessful)
	err := c.cc.Invoke(ctx, "/pb.DonorPatients/CancelRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donorPatientsClient) CancelConnection(ctx context.Context, in *Util, opts ...grpc.CallOption) (*StatusSuccessful, error) {
	out := new(StatusSuccessful)
	err := c.cc.Invoke(ctx, "/pb.DonorPatients/CancelConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DonorPatientsServer is the server API for DonorPatients service.
// All implementations must embed UnimplementedDonorPatientsServer
// for forward compatibility
type DonorPatientsServer interface {
	CreateUser(context.Context, *Util) (*User, error)
	Login(context.Context, *Util) (*User, error)
	DeleteUser(context.Context, *Util) (*StatusSuccessful, error)
	UpdateUser(context.Context, *Util) (*User, error)
	GetUser(context.Context, *Util) (*User, error)
	GetAllDonors(*Util, DonorPatients_GetAllDonorsServer) error
	GetAllPatients(*Util, DonorPatients_GetAllPatientsServer) error
	SendRequest(context.Context, *Util) (*StatusSuccessful, error)
	AcceptRequest(context.Context, *Util) (*StatusSuccessful, error)
	CancelRequest(context.Context, *Util) (*StatusSuccessful, error)
	CancelConnection(context.Context, *Util) (*StatusSuccessful, error)
	mustEmbedUnimplementedDonorPatientsServer()
}

// UnimplementedDonorPatientsServer must be embedded to have forward compatible implementations.
type UnimplementedDonorPatientsServer struct {
}

func (UnimplementedDonorPatientsServer) CreateUser(context.Context, *Util) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDonorPatientsServer) Login(context.Context, *Util) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDonorPatientsServer) DeleteUser(context.Context, *Util) (*StatusSuccessful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedDonorPatientsServer) UpdateUser(context.Context, *Util) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedDonorPatientsServer) GetUser(context.Context, *Util) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedDonorPatientsServer) GetAllDonors(*Util, DonorPatients_GetAllDonorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllDonors not implemented")
}
func (UnimplementedDonorPatientsServer) GetAllPatients(*Util, DonorPatients_GetAllPatientsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllPatients not implemented")
}
func (UnimplementedDonorPatientsServer) SendRequest(context.Context, *Util) (*StatusSuccessful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedDonorPatientsServer) AcceptRequest(context.Context, *Util) (*StatusSuccessful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequest not implemented")
}
func (UnimplementedDonorPatientsServer) CancelRequest(context.Context, *Util) (*StatusSuccessful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRequest not implemented")
}
func (UnimplementedDonorPatientsServer) CancelConnection(context.Context, *Util) (*StatusSuccessful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelConnection not implemented")
}
func (UnimplementedDonorPatientsServer) mustEmbedUnimplementedDonorPatientsServer() {}

// UnsafeDonorPatientsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DonorPatientsServer will
// result in compilation errors.
type UnsafeDonorPatientsServer interface {
	mustEmbedUnimplementedDonorPatientsServer()
}

func RegisterDonorPatientsServer(s grpc.ServiceRegistrar, srv DonorPatientsServer) {
	s.RegisterService(&DonorPatients_ServiceDesc, srv)
}

func _DonorPatients_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Util)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonorPatientsServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DonorPatients/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonorPatientsServer).CreateUser(ctx, req.(*Util))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonorPatients_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Util)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonorPatientsServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DonorPatients/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonorPatientsServer).Login(ctx, req.(*Util))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonorPatients_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Util)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonorPatientsServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DonorPatients/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonorPatientsServer).DeleteUser(ctx, req.(*Util))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonorPatients_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Util)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonorPatientsServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DonorPatients/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonorPatientsServer).UpdateUser(ctx, req.(*Util))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonorPatients_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Util)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonorPatientsServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DonorPatients/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonorPatientsServer).GetUser(ctx, req.(*Util))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonorPatients_GetAllDonors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Util)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DonorPatientsServer).GetAllDonors(m, &donorPatientsGetAllDonorsServer{stream})
}

type DonorPatients_GetAllDonorsServer interface {
	Send(*User) error
	grpc.ServerStream
}

type donorPatientsGetAllDonorsServer struct {
	grpc.ServerStream
}

func (x *donorPatientsGetAllDonorsServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _DonorPatients_GetAllPatients_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Util)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DonorPatientsServer).GetAllPatients(m, &donorPatientsGetAllPatientsServer{stream})
}

type DonorPatients_GetAllPatientsServer interface {
	Send(*User) error
	grpc.ServerStream
}

type donorPatientsGetAllPatientsServer struct {
	grpc.ServerStream
}

func (x *donorPatientsGetAllPatientsServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _DonorPatients_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Util)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonorPatientsServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DonorPatients/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonorPatientsServer).SendRequest(ctx, req.(*Util))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonorPatients_AcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Util)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonorPatientsServer).AcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DonorPatients/AcceptRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonorPatientsServer).AcceptRequest(ctx, req.(*Util))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonorPatients_CancelRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Util)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonorPatientsServer).CancelRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DonorPatients/CancelRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonorPatientsServer).CancelRequest(ctx, req.(*Util))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonorPatients_CancelConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Util)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonorPatientsServer).CancelConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DonorPatients/CancelConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonorPatientsServer).CancelConnection(ctx, req.(*Util))
	}
	return interceptor(ctx, in, info, handler)
}

// DonorPatients_ServiceDesc is the grpc.ServiceDesc for DonorPatients service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DonorPatients_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DonorPatients",
	HandlerType: (*DonorPatientsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _DonorPatients_CreateUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _DonorPatients_Login_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _DonorPatients_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _DonorPatients_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _DonorPatients_GetUser_Handler,
		},
		{
			MethodName: "SendRequest",
			Handler:    _DonorPatients_SendRequest_Handler,
		},
		{
			MethodName: "AcceptRequest",
			Handler:    _DonorPatients_AcceptRequest_Handler,
		},
		{
			MethodName: "CancelRequest",
			Handler:    _DonorPatients_CancelRequest_Handler,
		},
		{
			MethodName: "CancelConnection",
			Handler:    _DonorPatients_CancelConnection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllDonors",
			Handler:       _DonorPatients_GetAllDonors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllPatients",
			Handler:       _DonorPatients_GetAllPatients_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/pb.proto",
}
